<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Validator;

class Guest extends Model
{
    use HasFactory;

    public const COUNTRY_CODES = [
        '+1' => 'United States',
        '+44' => 'United Kingdom',
        '+33' => 'France',
        '+49' => 'Germany',
        '+7' => 'Russia',
        '+39' => 'Italy',
        '+34' => 'Spain',
        '+86' => 'China',
        '+81' => 'Japan',
        '+61' => 'Australia',
        '+55' => 'Brazil',
        '+91' => 'India',
        '+27' => 'South Africa',
        '+82' => 'South Korea',
        '+20' => 'Egypt',
        '+10' => 'Saudi Arabia',
        '+46' => 'Sweden',
        '+31' => 'Netherlands',
        '+48' => 'Poland',
        '+64' => 'New Zealand',
        '+65' => 'Singapore',
        '+91' => 'India',
        '+52' => 'Mexico',
        '+41' => 'Switzerland',
        '+43' => 'Austria',
        '+421' => 'Slovakia',
        '+420' => 'Czech Republic',
        '+34' => 'Spain',
        '+370' => 'Lithuania',
        '+371' => 'Latvia',
        '+372' => 'Estonia',
        '+381' => 'Serbia',
        '+382' => 'Montenegro',
        '+385' => 'Croatia',
        '+386' => 'Slovenia',
        '+387' => 'Bosnia and Herzegovina',
        '+389' => 'North Macedonia',
        '+998' => 'Uzbekistan',
        '+996' => 'Kyrgyzstan',
        '+994' => 'Azerbaijan',
        '+993' => 'Turkmenistan',
        '+992' => 'Tajikistan',
        '+960' => 'Maldives',
        '+961' => 'Lebanon',
        '+962' => 'Jordan',
        '+963' => 'Syria',
        '+964' => 'Iraq',
        '+965' => 'Kuwait',
        '+966' => 'Saudi Arabia',
        '+967' => 'Yemen',
        '+968' => 'Oman',
        '+970' => 'Palestine',
        '+971' => 'United Arab Emirates',
        '+972' => 'Israel',
        '+973' => 'Bahrain',
        '+974' => 'Qatar',
        '+975' => 'Bhutan',
        '+976' => 'Mongolia',
        '+977' => 'Nepal',
        '+992' => 'Tajikistan',
        '+993' => 'Turkmenistan',
        '+994' => 'Azerbaijan',
        '+995' => 'Georgia',
        '+996' => 'Kyrgyzstan',
        '+998' => 'Uzbekistan',
        '+233' => 'Ghana',
        '+234' => 'Nigeria',
        '+235' => 'Chad',
        '+236' => 'Central African Republic',
        '+237' => 'Cameroon',
        '+238' => 'Cape Verde',
        '+239' => 'São Tomé and Príncipe',
        '+240' => 'Equatorial Guinea',
        '+241' => 'Gabon',
        '+242' => 'Congo',
        '+243' => 'Democratic Republic of the Congo',
        '+244' => 'Angola',
        '+245' => 'Guinea-Bissau',
        '+246' => 'British Indian Ocean Territory',
        '+247' => 'Ascension Island',
        '+248' => 'Seychelles',
        '+249' => 'Sudan',
        '+250' => 'Rwanda',
        '+251' => 'Ethiopia',
        '+252' => 'Somalia',
        '+253' => 'Djibouti',
        '+254' => 'Kenya',
        '+255' => 'Tanzania',
        '+256' => 'Uganda',
        '+257' => 'Burundi',
        '+258' => 'Mozambique',
        '+260' => 'Zambia',
        '+261' => 'Madagascar',
        '+262' => 'Réunion',
        '+263' => 'Zimbabwe',
        '+264' => 'Namibia',
        '+265' => 'Malawi',
        '+266' => 'Lesotho',
        '+267' => 'Botswana',
        '+268' => 'Eswatini',
        '+269' => 'Comoros',
        '+290' => 'Saint Helena',
        '+291' => 'Eritrea',
        '+297' => 'Aruba',
        '+298' => 'Faroe Islands',
        '+299' => 'Greenland',
        '+350' => 'Gibraltar',
        '+351' => 'Portugal',
        '+352' => 'Luxembourg',
        '+353' => 'Ireland',
        '+354' => 'Iceland',
        '+355' => 'Albania',
        '+356' => 'Malta',
        '+357' => 'Cyprus',
        '+358' => 'Finland',
        '+359' => 'Bulgaria',
        '+370' => 'Lithuania',
        '+371' => 'Latvia',
        '+372' => 'Estonia',
        '+373' => 'Moldova',
        '+374' => 'Armenia',
        '+375' => 'Belarus',
        '+376' => 'Andorra',
        '+377' => 'Monaco',
        '+378' => 'San Marino',
        '+379' => 'Vatican City',
        '+380' => 'Ukraine',
        '+381' => 'Serbia',
        '+382' => 'Montenegro',
        '+383' => 'Kosovo',
        '+385' => 'Croatia',
        '+386' => 'Slovenia',
        '+387' => 'Bosnia and Herzegovina',
        '+388' => 'Jersey',
        '+389' => 'North Macedonia',
        '+420' => 'Czech Republic',
        '+421' => 'Slovakia',
        '+422' => 'Greenland',
        '+423' => 'Liechtenstein',
        '+500' => 'Falkland Islands',
        '+501' => 'Belize',
        '+502' => 'Guatemala',
        '+503' => 'El Salvador',
        '+504' => 'Honduras',
        '+505' => 'Nicaragua',
        '+506' => 'Costa Rica',
        '+507' => 'Panama',
        '+508' => 'Saint Pierre and Miquelon',
        '+509' => 'Haiti',
        '+590' => 'Guadeloupe',
        '+591' => 'Bolivia',
        '+592' => 'Guyana',
        '+593' => 'Ecuador',
        '+594' => 'French Guiana',
        '+595' => 'Paraguay',
        '+596' => 'Martinique',
        '+597' => 'Suriname',
        '+598' => 'Uruguay',
        '+599' => 'Netherlands Antilles',
        '+670' => 'East Timor',
        '+672' => 'Australian External Territories',
        '+673' => 'Brunei',
        '+674' => 'Nauru',
        '+675' => 'Papua New Guinea',
        '+676' => 'Tonga',
        '+677' => 'Solomon Islands',
        '+678' => 'Vanuatu',
        '+679' => 'Fiji',
        '+680' => 'Palau',
        '+681' => 'Wallis and Futuna',
        '+682' => 'Cook Islands',
        '+683' => 'Niue',
        '+685' => 'Samoa',
        '+686' => 'Kiribati',
        '+687' => 'New Caledonia',
        '+688' => 'Tuvalu',
        '+689' => 'French Polynesia',
        '+690' => 'Tokelau',
        '+691' => 'Micronesia',
        '+692' => 'Marshall Islands',
        '+693' => 'Palau',
        '+694' => 'North Korea',
        '+695' => 'South Korea',
        '+696' => 'Japan',
        '+697' => 'China',
        '+698' => 'India',
    ];
    protected $fillable = ['first_name', 'last_name', 'email', 'phone', 'country'];

    public static function boot()
    {
        parent::boot();

        static::creating(function ($guest) {
            $guest->country = $guest->getCountryFromPhone($guest->phone);
        });

        static::updating(function ($guest) {
            $guest->country = $guest->getCountryFromPhone($guest->phone);
        });
    }

    public function getCountryFromPhone($phone)
    {
        foreach (self::COUNTRY_CODES as $code => $country) {
            if (str_starts_with($phone, $code)) {
                return $country;
            }
        }

        return null;
    }
}
